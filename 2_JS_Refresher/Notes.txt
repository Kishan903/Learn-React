2) Let vs Const
var, let, const
let - variable values
const - constant values

3) Arrow functions

normal function
function myFunction(){
    ...
}

arrow function 
const myFunction = () => {
    ...
}

example 
const myName = (name) => {
    console.log(name);
}

myName("Kishan")

alternatives

one argument
const myName = name => {
    console.log(name);
}

no arguments 
const myName = () => {
    console.log("Kishan")
}
#in above empty braces is mandatory

if you have more than one argument you also need paranthesis
conse myName = (name, age) = {
    console.log(name, age)
}

lot of function just return something in this case
single line return
const multiply = number => number * 2;

4) Exports and Imports(Modules)

Exports

In Person.js
const person = () => {
    name: 'Max'
}
export default person

In utility.js
export const clean = () = {...}
export const baseData = 10;

app.js
import person from './person.js' #here we can give any name in the default export
import prs from './person.js' #here we can give any name in the defualt export

import {baseData} from './utility.js' # here we have to give the same name in simple export with curly braces
import {clean} from './utility.js' # here we have to give the same name in simple export with curly braces

you can also use alias in the name export
import {baseData as bd} from './utility.js'
also you can export everything like this
import * as bundled from './utility.js'
bundled is an object you can use from bundled like this
bundled.clean or bundled.baseData

5) Understanding Classes
class Person {
    name = "Max" # properties
    call = () => {...} # methods
}

const myPerson = new Person()
myPerson.call()
console.log(myPerson.name)

inheritance
class Person extends Master

example
class Person {
    constructor() {
        this.name = "Kishan"
    }

    printMyname() {
        console.log(this.name)
    }
}

const newPerson = new Person()
newPerson.printMyname()

example of extend
class Human {
    constructor() {
        this.gender = "Male"
    }

    printGender() {
        console.log(this.gender)
    }
}

class Person extends Human{
        constructor() {
        super(); # to initialize the parent class constructor 
        this.name = "Kishan"
    }

    printMyname() {
        console.log(this.name)
    }
}

const newPerson = new Person();
newPerson.printMyname();
newPerson.printMyGender();

6) Classes, Properties and Methods
# in next generation javascript you don't have to use constructor to assign any value to anything
for example in es6 you can assign any variable value like this
class Person {
    constructor(){
        this.name = "Kishan"
    }
}
# instead of this you can directly use this es7
class Person {
    name = "Kishan"
}

#also same is for fucntion/methods
myFunction() {
    ...
}
#instead of this you can directly use this es7
myFunction = () => {...}

example
class Human {
    gender = "Male"
    myGender = () => {console.log(this.gender)}
}
class Person extends Human {
    name = "Kishan"
    myName = () => {
        return console.log(this.name)
    }
}

const newPerson = new Person();
newPerson.printMyname();
newPerson.printMyGender();

7)Spread and Rest Operators
Spread Operator
# This is used to split up array elements or object properties
const myArray = [1,2,3,4]
const newArray = [...myArray, 5,6]
const myObject = {"name": "Kishan"}
const myNewObject = {...myObject, "age": 10}

Rest Operator
# Used to merge a list of fucntion arguments in a list
function sortArgs(...args) {
    return args.sort()
}

example
Spread Operator
const numbers = [1,2,3]
const newNumber = [...numbers, 4]
console.log(numbers);

Rest Operator
const filter = (...args) => {args.filter(el => el === 1)}

8) Destructuring
array destructuring
[a, b] = ["Hello", "Kishan"]

object destructuring
{name} = {"name": "Kishan", "age": 29}
in here 
console.log(name) # logs "Kishan"
console.log(age) # undefined

const number = [1,2,3];
[num1, num2] = numbers;
[num1, , num3] = numbers;

9) Reference or Primitive types
const number = 1
const number2 = numbers
console.log(number2)
# Primitive types: numbers, boolean, strings (real copy when you reassgn)
# Objects and arrays are reference types
const person = {
    name = "Max"
};
const secondPerson = person;
# pointer to person
# so, if we change person value secondPerson value will also change and vice versa

# now what to do when we want to create an copy
# use speread Operator
const secondPerson = {...person};